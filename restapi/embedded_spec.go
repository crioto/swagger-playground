// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is example API documentation",
    "title": "Example API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "example.api.com",
  "basePath": "/v2",
  "paths": {
    "/cars": {
      "post": {
        "tags": [
          "cars"
        ],
        "summary": "Add car",
        "parameters": [
          {
            "description": "add a new car",
            "name": "car's parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "405": {
            "description": "Error in adding car"
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "get car by id",
        "parameters": [
          {
            "type": "integer",
            "description": "id of car",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "parameters": [
          {
            "description": "Created user object",
            "name": "user's parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "description": "Change information about user",
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "user's parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid user"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "description": "delete by username",
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid username"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Cars": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "float64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Information about user",
      "name": "user"
    },
    {
      "description": "Information about cars",
      "name": "cars"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is example API documentation",
    "title": "Example API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "example.api.com",
  "basePath": "/v2",
  "paths": {
    "/cars": {
      "post": {
        "tags": [
          "cars"
        ],
        "summary": "Add car",
        "parameters": [
          {
            "description": "add a new car",
            "name": "car's parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "405": {
            "description": "Error in adding car"
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "get car by id",
        "parameters": [
          {
            "type": "integer",
            "description": "id of car",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "parameters": [
          {
            "description": "Created user object",
            "name": "user's parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "description": "Change information about user",
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "parameters": [
          {
            "type": "string",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "user's parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid user"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "description": "delete by username",
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid username"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Cars": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "float64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Information about user",
      "name": "user"
    },
    {
      "description": "Information about cars",
      "name": "cars"
    }
  ]
}`))
}
