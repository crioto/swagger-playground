// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteUserUsernameHandlerFunc turns a function with the right signature into a delete user username handler
type DeleteUserUsernameHandlerFunc func(DeleteUserUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteUserUsernameHandlerFunc) Handle(params DeleteUserUsernameParams) middleware.Responder {
	return fn(params)
}

// DeleteUserUsernameHandler interface for that can handle valid delete user username params
type DeleteUserUsernameHandler interface {
	Handle(DeleteUserUsernameParams) middleware.Responder
}

// NewDeleteUserUsername creates a new http.Handler for the delete user username operation
func NewDeleteUserUsername(ctx *middleware.Context, handler DeleteUserUsernameHandler) *DeleteUserUsername {
	return &DeleteUserUsername{Context: ctx, Handler: handler}
}

/*DeleteUserUsername swagger:route DELETE /user/{username} user deleteUserUsername

Delete user

delete by username

*/
type DeleteUserUsername struct {
	Context *middleware.Context
	Handler DeleteUserUsernameHandler
}

func (o *DeleteUserUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteUserUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
