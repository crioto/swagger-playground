swagger: "2.0"
info:
  description: "This is example API documentation"
  version: "1.0.0"
  title: "Example API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "example.api.com"
basePath: /v2
tags:
- name: user
  description: Information about user
- name: cars
  description: Information about cars
produces:
      - application/json
schemes:
- https
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: ""
      parameters:
      - in: body
        name: user's parameters
        description: Created user object
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        202:
          description: "Successful"
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      parameters:
      - name: username
        in: path
        description: ""
        required: true
        type: string
      responses:
        200:
          description: "Successful"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username"
        404:
          description: "User not found"
    put:
      tags:
      - user
      summary: Updated user
      description: Change information about user
      parameters:
      - name: username
        in: path
        description: ""
        required: true
        type: string
      - in: body
        name: user's parameters
        description: Updated user object
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful"
        400:
          description: "Invalid user"
        404:
          description: "User not found"
    delete:
      tags:
      - user
      summary: Delete user
      description: delete by username
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        200:
          description: "Successful"
        400:
          description: "Invalid username"
        404:
          description: "User not found"
  /cars:
    post:
      tags:
      - cars
      summary: Add car
      description: ""
      parameters:
      - in: body
        name: car's parameters
        description: add a new car
        required: true
        schema: 
          $ref: "#/definitions/Cars"
      responses:
        200:
          description: "Successful"
        405:
          description: "Error in adding car"
  /cars/{id}:
    get:
      tags:
      - cars
      summary: get car by id
      description: ""
      parameters:
      - name: id
        in: path
        description: id of car
        required: true
        type: integer
      responses:
        200:
          description: "Successful"
        400:
          description: "Invalid input"
        404:
          description: "Car not found"
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
  Cars:
    type: object
    properties:
      id: 
       type: integer
       format: int64
      name:
        type: string
      status:
        type: string
      price:
        type: number
        format: float64

