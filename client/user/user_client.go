// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUserUsername deletes user

delete by username
*/
func (a *Client) DeleteUserUsername(params *DeleteUserUsernameParams) (*DeleteUserUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUserUsername",
		Method:             "DELETE",
		PathPattern:        "/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserUsernameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserUsernameOK), nil

}

/*
GetUserUsername gets user by user name
*/
func (a *Client) GetUserUsername(params *GetUserUsernameParams) (*GetUserUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserUsername",
		Method:             "GET",
		PathPattern:        "/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserUsernameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserUsernameOK), nil

}

/*
PostUser creates user
*/
func (a *Client) PostUser(params *PostUserParams) (*PostUserAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserAccepted), nil

}

/*
PutUserUsername updateds user

Change information about user
*/
func (a *Client) PutUserUsername(params *PutUserUsernameParams) (*PutUserUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUserUsername",
		Method:             "PUT",
		PathPattern:        "/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUserUsernameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUserUsernameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
